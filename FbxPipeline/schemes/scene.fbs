
namespace apemodefb;

enum EVersionFb : ubyte {
    Value = 6
}

enum ECullingTypeFb : ubyte
{
	CullingOff,
	CullingOnCCW,
	CullingOnCW
}

enum EWrapModeFb : ubyte {
    Repeat,
    Clamp
}

enum EBlendModeFb : ubyte {
    Translucent,
    Additive,
    Modulate,
    Modulate2,
    Over
}

enum EAlphaSourceFb : ubyte {
    None,
    RGBIntensity,
    Black
}

enum ETextureUseFb : ubyte {
    Standard,
    ShadowMap,
    LightMap,
    SphericalReflectionMap,
    SphereReflectionMap,
    BumpNormalMap
}

enum EMappingTypeFb : ubyte {
    Null,
    Planar,
    Spherical,
    Cylindrical,
    Box,
    Face,
    UV,
    Environment
}

enum EPlanarMappingNormalFb : ubyte {
    PlanarNormalX,
    PlanarNormalY,
    PlanarNormalZ
}

enum EVertexFormatFb : ubyte {
    Static,
    StaticSkinned,
	Packed,
	PackedSkinned,
}

enum EIndexTypeFb : ubyte {
	UInt16,
	UInt16Compressed,
	UInt32,
	UInt32Compressed,
	Count,
}

enum EMaterialPropTypeFb : ubyte {
	Bool,
	Float,
	Float2,
	Float3,
	Texture,
}

enum EAnimCurvePropertyFb : ubyte {
	LclTranslation,
    RotationOffset,
    RotationPivot,
    PreRotation,
    PostRotation,
    LclRotation,
    ScalingOffset,
    ScalingPivot,
    LclScaling,
    GeometricTranslation,
    GeometricRotation,
    GeometricScaling
}

enum EAnimCurveChannelFb : ubyte {
	X,
    Y,
    Z,
}

enum EInterpolationModeFb : ubyte {
	Const, Linear, Cubic
}

enum ELightTypeFb : ubyte {
	Point,
	Directional,
	Spot,
	Area,
}

enum EAreaLightTypeFb : ubyte {
	Rect,
	Sphere,
}

enum EValueTypeFb : ubyte {
	Bool,
    Int,
    Float,
    Float2,
    Float3,
    Float4,
    String
}

struct Vec2Fb {
    x : float;
    y : float;
}

struct Vec3Fb {
    x : float;
    y : float;
    z : float;
}

struct Vec4Fb {
    x : float;
    y : float;
    z : float;
    w : float;
}

struct Mat4Fb {
    x : Vec4Fb;
    y : Vec4Fb;
    z : Vec4Fb;
    w : Vec4Fb;
}

struct StaticVertexFb {
    position : Vec3Fb;
    normal : Vec3Fb;
    tangent : Vec4Fb;
    uv : Vec2Fb;
}

struct PackedVertexFb {
    position : uint;
    normal : uint;
    tangent : uint;
    uv : uint;
}

struct StaticSkinnedVertexFb {
    position : Vec3Fb;
    normal : Vec3Fb;
    tangent : Vec4Fb;
    uv : Vec2Fb;
    weights : Vec4Fb;
    indices : Vec4Fb;
}

struct PackedSkinnedVertexFb {
    position : uint;
    normal : uint;
    tangent : uint;
    uv : uint;
    weights : uint;
    indices : uint;
}

struct AnimStackFb {
    id : uint;
    name_id : uint( key );
}

struct AnimLayerFb {
    id : uint;
    anim_stack_id : uint;
    name_id : uint( key );
}

struct AnimCurveKeyFb {
    time : float;
    value : float;
    arrive_tangent : float;
    leave_tangent : float;
	interpolationMode : EInterpolationModeFb;
}

table AnimCurveFb {
    id : uint;
    name_id : uint( key );
    anim_stack_id : uint;
    anim_layer_id : uint;
	property : EAnimCurvePropertyFb;
	channel : EAnimCurveChannelFb;
	keys : [AnimCurveKeyFb];
}

struct TextureFb {
    id : uint;
    name_id : uint( key );
    file_id : uint;
    texture_type_id : uint;
    blend_mode : EBlendModeFb;
    wrap_mode_u : EWrapModeFb;
    wrap_mode_v : EWrapModeFb;
    offset_u : float;
    offset_v : float;
    scale_u : float;
    scale_v : float;
    cropping_bottom : int;
    cropping_left : int;
    cropping_right : int;
    cropping_top : int;
    rotation_u : float;
    rotation_v : float;
    rotation_w : float;
    swap_uv : bool;
    wipe_mode : bool;
    premultiplied_alpha : bool;
    alpha_source : EAlphaSourceFb;
    texture_use : ETextureUseFb;
    mapping_type : EMappingTypeFb;
    planar_mapping_normal : EPlanarMappingNormalFb;
}

struct SubmeshFb {
	bbox_min : Vec3Fb;
	bbox_max : Vec3Fb;
	position_offset : Vec3Fb;
	position_scale : Vec3Fb;
	uv_offset : Vec2Fb;
	uv_scale : Vec2Fb;
    base_vertex : uint;
    vertex_count : uint;
    base_index : uint;
    index_count : uint;
    base_subset : ushort;
    subset_count : ushort;
    vertex_format : EVertexFormatFb;
    vertex_stride : ushort;
}

struct SubsetFb {
    material_id : uint;
    base_index : uint;
    index_count : uint;
}

table NameFb {
	h : ulong( key );
	v : string;
}

struct TransformFb {
    translation : Vec3Fb;
    rotation_offset : Vec3Fb;
    rotation_pivot : Vec3Fb;
    pre_rotation : Vec3Fb;
    post_rotation : Vec3Fb;
    rotation : Vec3Fb;
    scaling_offset : Vec3Fb;
    scaling_pivot : Vec3Fb;
    scaling : Vec3Fb;
    geometric_translation : Vec3Fb;
    geometric_rotation : Vec3Fb;
    geometric_scaling : Vec3Fb;
}

table SkinFb {
    name_id : uint( key );
    links_ids : [uint];
}

table MeshFb {
    vertices : [ubyte];
    submeshes : [SubmeshFb];
    subsets : [SubsetFb];
    indices : [ubyte];
    index_type : EIndexTypeFb;
	skin_id : uint;
}

struct MaterialPropFb {
    name_id : uint( key );
    value_id : uint;
}

table MaterialFb {
    id : uint;
    name_id : uint( key );
    properties : [MaterialPropFb];
    texture_properties : [MaterialPropFb];
}

struct CameraFb {
    id : uint;
    name_id : uint( key );
	up : Vec3Fb;
	aspect : Vec2Fb;
}

struct LightFb {
    id : uint;
    name_id : uint( key );
	light_type : ELightTypeFb;
	area_light_type : EAreaLightTypeFb;
	color : Vec3Fb;
	fog : float;
	intensity : float;
	inner_angle : float;
	near_attenuation_start : float;
	near_attenuation_end : float;
	far_attenuation_start : float;
	far_attenuation_end : float;
	outer_angle : float;
	decay_start : float;
	casts_shadows : bool;
}

table NodeFb {
    id : uint;
    mesh_id : uint;
    light_id : uint;
    camera_id : uint;
    name_id : uint( key );
	culling_type : ECullingTypeFb;
    child_ids : [uint];
    anim_curve_ids : [uint];
}

table FileFb {
	id : uint;
    name_id : uint( key );
	buffer : [ubyte];
}

table SceneFb {
	version : EVersionFb;

    transforms : [TransformFb];
    nodes : [NodeFb];
    meshes : [MeshFb];
    anim_stacks : [AnimStackFb];
    anim_layers : [AnimLayerFb];
    anim_curves : [AnimCurveFb];
    materials : [MaterialFb];
    textures : [TextureFb];
    cameras : [CameraFb];
    lights : [LightFb];
    skins : [SkinFb];
    files : [FileFb];

    bool_values : [bool];
    int_values : [int];
    float_values : [float];
    string_values : [string];
}

root_type SceneFb;
file_extension "fbxp";
file_identifier "FBXP";