# automatically generated by the FlatBuffers compiler, do not modify

# namespace: apemodefb

import flatbuffers

class AnimCurveFb(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAnimCurveFb(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AnimCurveFb()
        x.Init(buf, n + offset)
        return x

    # AnimCurveFb
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AnimCurveFb
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AnimCurveFb
    def NameId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AnimCurveFb
    def AnimStackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AnimCurveFb
    def AnimLayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AnimCurveFb
    def Property(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # AnimCurveFb
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # AnimCurveFb
    def Keys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AnimCurveFb
    def KeysAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # AnimCurveFb
    def KeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnimCurveFb
    def KeyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # AnimCurveFb
    def CompressionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def AnimCurveFbStart(builder): builder.StartObject(9)
def AnimCurveFbAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def AnimCurveFbAddNameId(builder, nameId): builder.PrependUint32Slot(1, nameId, 0)
def AnimCurveFbAddAnimStackId(builder, animStackId): builder.PrependUint32Slot(2, animStackId, 0)
def AnimCurveFbAddAnimLayerId(builder, animLayerId): builder.PrependUint32Slot(3, animLayerId, 0)
def AnimCurveFbAddProperty(builder, property): builder.PrependUint8Slot(4, property, 0)
def AnimCurveFbAddChannel(builder, channel): builder.PrependUint8Slot(5, channel, 0)
def AnimCurveFbAddKeys(builder, keys): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(keys), 0)
def AnimCurveFbStartKeysVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def AnimCurveFbAddKeyType(builder, keyType): builder.PrependUint8Slot(7, keyType, 0)
def AnimCurveFbAddCompressionType(builder, compressionType): builder.PrependUint8Slot(8, compressionType, 0)
def AnimCurveFbEnd(builder): return builder.EndObject()
