# automatically generated by the FlatBuffers compiler, do not modify

# namespace: apemodefb

import flatbuffers

class TextureFb(object):
    __slots__ = ['_tab']

    # TextureFb
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TextureFb
    def Id(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # TextureFb
    def NameId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # TextureFb
    def FileId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # TextureFb
    def TextureTypeId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # TextureFb
    def BlendMode(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # TextureFb
    def WrapModeU(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(17))
    # TextureFb
    def WrapModeV(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(18))
    # TextureFb
    def OffsetU(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))
    # TextureFb
    def OffsetV(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # TextureFb
    def ScaleU(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))
    # TextureFb
    def ScaleV(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))
    # TextureFb
    def CroppingBottom(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(36))
    # TextureFb
    def CroppingLeft(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(40))
    # TextureFb
    def CroppingRight(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(44))
    # TextureFb
    def CroppingTop(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(48))
    # TextureFb
    def RotationU(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(52))
    # TextureFb
    def RotationV(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(56))
    # TextureFb
    def RotationW(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(60))
    # TextureFb
    def SwapUv(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(64))
    # TextureFb
    def WipeMode(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(65))
    # TextureFb
    def PremultipliedAlpha(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(66))
    # TextureFb
    def AlphaSource(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(67))
    # TextureFb
    def TextureUse(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(68))
    # TextureFb
    def MappingType(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(69))
    # TextureFb
    def PlanarMappingNormal(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(70))

def CreateTextureFb(builder, id, nameId, fileId, textureTypeId, blendMode, wrapModeU, wrapModeV, offsetU, offsetV, scaleU, scaleV, croppingBottom, croppingLeft, croppingRight, croppingTop, rotationU, rotationV, rotationW, swapUv, wipeMode, premultipliedAlpha, alphaSource, textureUse, mappingType, planarMappingNormal):
    builder.Prep(4, 72)
    builder.Pad(1)
    builder.PrependUint8(planarMappingNormal)
    builder.PrependUint8(mappingType)
    builder.PrependUint8(textureUse)
    builder.PrependUint8(alphaSource)
    builder.PrependBool(premultipliedAlpha)
    builder.PrependBool(wipeMode)
    builder.PrependBool(swapUv)
    builder.PrependFloat32(rotationW)
    builder.PrependFloat32(rotationV)
    builder.PrependFloat32(rotationU)
    builder.PrependInt32(croppingTop)
    builder.PrependInt32(croppingRight)
    builder.PrependInt32(croppingLeft)
    builder.PrependInt32(croppingBottom)
    builder.PrependFloat32(scaleV)
    builder.PrependFloat32(scaleU)
    builder.PrependFloat32(offsetV)
    builder.PrependFloat32(offsetU)
    builder.Pad(1)
    builder.PrependUint8(wrapModeV)
    builder.PrependUint8(wrapModeU)
    builder.PrependUint8(blendMode)
    builder.PrependUint32(textureTypeId)
    builder.PrependUint32(fileId)
    builder.PrependUint32(nameId)
    builder.PrependUint32(id)
    return builder.Offset()
