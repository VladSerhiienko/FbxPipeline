# automatically generated by the FlatBuffers compiler, do not modify

# namespace: apemodefb

import flatbuffers

class MeshFb(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMeshFb(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MeshFb()
        x.Init(buf, n + offset)
        return x

    # MeshFb
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MeshFb
    def Vertices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # MeshFb
    def VerticesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # MeshFb
    def VerticesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MeshFb
    def Submeshes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 48
            from .SubmeshFb import SubmeshFb
            obj = SubmeshFb()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MeshFb
    def SubmeshesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MeshFb
    def Subsets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .SubsetFb import SubsetFb
            obj = SubsetFb()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MeshFb
    def SubsetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MeshFb
    def Indices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # MeshFb
    def IndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # MeshFb
    def IndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MeshFb
    def IndexType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MeshFb
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def MeshFbStart(builder): builder.StartObject(6)
def MeshFbAddVertices(builder, vertices): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vertices), 0)
def MeshFbStartVerticesVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def MeshFbAddSubmeshes(builder, submeshes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(submeshes), 0)
def MeshFbStartSubmeshesVector(builder, numElems): return builder.StartVector(48, numElems, 4)
def MeshFbAddSubsets(builder, subsets): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(subsets), 0)
def MeshFbStartSubsetsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def MeshFbAddIndices(builder, indices): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)
def MeshFbStartIndicesVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def MeshFbAddIndexType(builder, indexType): builder.PrependUint8Slot(4, indexType, 0)
def MeshFbAddSkinId(builder, skinId): builder.PrependUint32Slot(5, skinId, 0)
def MeshFbEnd(builder): return builder.EndObject()
